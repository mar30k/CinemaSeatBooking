@model ProductsViewModel
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Food And Beverage";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="../css/styles.css" rel="stylesheet">
    <link rel="stylesheet" href="~/CinemaSeatBooking.styles.css" asp-append-version="true" />
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <style>
        .custom-container {
        padding-left: 35px;
        padding-right: 35px;
        }

        .btn:focus,
        .btn:active {
        outline: none !important;
        box-shadow: none !important;
        }

        .card-img-top {
        height: 230px;
        width: 100%;
        }

        .btn-circle {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
        font-size: 14px;
        }

        #selected-items-container {
        margin-top: 20px;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
        }

        .taxCalculator{
        margin-top: 20px;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 5px;
        }

        .dotted-line {
        border-bottom: 1px dashed #000; /* Adjust the color and style as needed */
        width: 100%;
        margin-top: 5px; /* Adjust the spacing as needed */
        }

        .Details {
        margin-top: 20px;
        border: 1px solid #f2e4;
        padding: 10px;
        border-radius: 5px;
        }

        .Movie{
        margin-bottom: 5px;
        padding: 5px;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 3px;
        }
        .selected-item {
        margin-bottom: 5px;
        padding: 5px;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 3px;
        }

        .total-price {
        margin-bottom: 5px;
        padding: 5px;
        background-color: #c2e3f1;
        border: 1px solid #ccc;
        border-radius: 3px;
        }

        .btn-outline-primary {
        color: #28a745; /* Green color */
        border-color: #28a745;
        }

        .btn-outline-primary:hover {
        background-color: #28a745; /* Green color on hover */
        color: #fff; /* Text color on hover */
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center w-100 ml-5">
                    <div class="Popcorn d-inline-flex">
                        <h4 style="margin-top: 3px;">Food And Beverage</h4>
                    </div>
                    <div>
                        <div style="text-align: center; display: inline-block; margin-right: 20px; margin-top: 3px;" id="priceContainer">
                            <button id="skipButton" class="btn btn-outline-primary">Skip</button>
                        </div>
                        <div id="UpdatedCountDownTimer" style="display:none; display: inline-block; margin-right: 20px; margin-top: 3px;"></div>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <div class="custom-container" style="position: relative; padding-right: 0; padding-left: 0">
        <div class="row">
            <div class="col-9 ml-5 mb-3 mt-3 ">
                @if (Model != null && Model.Products.Any())
                {
                    <div class="container">
                        <div class="row">
                            @foreach (var product in Model.Products)
                            {
                                @if (product.Children != null && product.Children.Any())
                                {
                                    var categoryProducts = product.Children.ToList();
                                    for (int i = 0; i < categoryProducts.Count; i++)
                                    {
                                        var categoryProduct = categoryProducts[i];

                                        <div class="col-12 mb-3">
                                            <h5>@categoryProduct.Name</h5>
                                        </div>

                                        @if (categoryProduct.Children != null && categoryProduct.Children.Any())
                                        {
                                            foreach (var articleProduct in categoryProduct.Children)
                                            {
                                                <div class="col-9 col-lg-3 col-md-4 col-sm-6 mb-3">
                                                    <div class="card selectable-card">
                                                        <img src="@articleProduct.Pictures.FirstOrDefault()" class="card-img-top">
                                                        <div class="card-body" style="display: flex; flex-direction: column; align-items: center;">
                                                            <h6 class="card-title">@articleProduct.Name</h6>
                                                            <p class="card-text" style="margin: 0; text-align: center;">@articleProduct.Price Birr</p>
                                                            <p class="article" style="display: none;">@articleProduct.Code</p>

                                                            <!-- Quantity Control Division (Initially Hidden) -->
                                                            <div class="quantity-control d-flex" style="margin-top: 5px; text-align: center; display: none !important;">
                                                                <button class="btn btn-outline-danger btn-circle" style="padding: 6px; font-size: 12px;" onclick="decrementValue()">-</button>
                                                                <p class="quantity" style="padding: 5px; font-size: 12px; margin: 0 ;">0</p>
                                                                <button class="btn btn-outline-primary btn-circle" style="padding: 6px; font-size: 12px; border-color: #28a745;" onclick="incrementValue()">+</button>
                                                            </div>

                                                            <!-- Show Button -->
                                                            <button class="btn btn-sm btn-outline-primary" style="margin-top: 5px;" onclick="showQuantityControl(this)">Add to Cart</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                        @if (i < categoryProducts.Count - 1)
                                        {
                                            <div class="col-12">
                                                <hr />
                                            </div>
                                        }
                                    }
                                }
                            }
                        </div>
                    </div>
                }
                else
                {
                    <p>No products available.</p>
                }
            </div>
            <div class="col-lg col-md-2 mt-3 mr-5" style="margin-right: 50px;">
                <div id="selected-items-container">
                    <div class="header" style="display: flex; justify-content: space-between; padding: 5px; background-color: black; color: white; margin-bottom: 10px;">
                        <span style="flex: 2 1 0%;">Description</span>
                        <span style="flex: 1 1 0%;">Qty</span>
                        <span style="flex: 1 1 0%;">Price</span>
                        <span style="flex: 1 1 0%; text-align: right;">Amounts</span>
                    </div>
                    <script>
                        $(document).ready(function () {
                        var selectedSeatNamesJson = sessionStorage.getItem('selectedSeatNames');
                        var selectedSeatNamesArray = selectedSeatNamesJson ? JSON.parse(selectedSeatNamesJson) : [];
                        var numberOfElements = selectedSeatNamesArray.length;

                        // Update the content dynamically on the client side
                        var numberOfElementsSpan = document.getElementById('numberOfElements');
                        var amount = document.getElementById('amount');
                        if (numberOfElementsSpan) {
                        numberOfElementsSpan.innerText = numberOfElements;
                        }
                        if (amount) {
                        var totalAmount = @Model.Price * numberOfElements;
                        amount.innerText = totalAmount.toFixed(1) + '$';
                        }
                        });
                    </script>


                    <div class="Movie" style="display: flex; justify-content: space-between; padding: 5px">
                        <span style="flex: 2 1 0%;">@Model.MovieName [Movie]</span>
                        <span style="flex: 1 1 0%" id="numberOfElements"></span>
                        <span style="flex: 1 1 0%">@Model.Price $</span>
                        <span style="flex: 1 1 0%; text-align: right;" id="amount"></span>
                    </div>

                </div>
                <div class="taxCalculator" style="display: flex; flex-wrap: wrap; justify-content: space-between; padding: 5px; margin-bottom: 5px;">
                    <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                        <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">ADDITIONAL CHARGE</span>
                        <span style="text-align: right;margin-right: 10px">PlaceHolder</span>
                    </div>
                    <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                        <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">DISCOUNT</span>
                        <span style="text-align: right;margin-right: 10px">PlaceHolder</span>
                    </div>
                    <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                        <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">SUBTOTAL</span>
                        <span style="text-align: right;margin-right: 10px">PlaceHolder</span>
                    </div>
                    <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                        <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">TAX1</span>
                        <span style="text-align: right; margin-right: 10px">PlaceHolder</span>
                    </div>
                    <div class="dotted-line"></div>
                    <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                        <span style="flex: 2 1 0%; text-align: left; margin-right: auto;"><strong>GRAND TOTAL</strong></span>
                        <span style="text-align: right; margin-right: 10px">PlaceHolder</span>
                    </div>
                </div>
                <div class="Details" style="display: flex; flex-wrap: wrap; justify-content: space-between; padding: 5px; margin-bottom: 5px;">
                    @if (Model is not null)
                    {
                        <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                            <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">Movie</span>
                            <span style="text-align: right;margin-right: 10px">@Model.MovieName</span>
                        </div>
                        <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                            <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">Schedule Date</span>
                            @if (Model.ScheduleDate is not null)
                            {
                                <span style="text-align: right;margin-right: 10px">@GetFormattedDateWithDayOfWeek(@Model.ScheduleDate)</span>
                            }
                        </div>
                        <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                            <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">Schedule Time</span>
                            @if (Model.ScheduleTime is not null)
                            {
                                <span style="text-align: right;margin-right: 10px">@Model.ScheduleTime (@GetEthiopianTime(@Model.ScheduleTime) LT)</span>
                            }
                        </div>
                        <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                            <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">Hall</span>
                            <span style="text-align: right;margin-right: 10px">@Model.HallName</span>
                        </div>
                        <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                            <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">Space Type</span>
                            <span style="text-align: right; margin-right: 10px">@Model.SpaceType</span>
                        </div>
                        <div style="flex: 0 0 100%; margin: 5px; display: flex; justify-content: space-between;">
                            <span style="flex: 2 1 0%; text-align: left; margin-right: auto;">Dimension</span>
                            <span style="text-align: right; margin-right: 10px">@Model.Dimension</span>
                        </div>
                    }
                    @functions {
                                        public string GetFormattedDateWithDayOfWeek(string date)
                        {
                            DateTime parsedDate;
                            if (DateTime.TryParse(date, out parsedDate))
                            {
                        string dayOfWeek = parsedDate.ToString("ddd"); // Get abbreviated day of the week
                        string formattedDate = parsedDate.ToString("dd-MM-yyyy"); // "dd-MM-yyyy" gives the desired format
                        return $"{dayOfWeek} {formattedDate}";
                            }

                            return string.Empty;
                        }

                        public string GetEthiopianTime(string utcTimeString)
                        {
                            if (DateTime.TryParse(utcTimeString, out DateTime utcTime))
                            {
                                // Convert UTC time to Ethiopia time
                        DateTime ethiopianTime = utcTime.AddHours(6);

                        return ethiopianTime.ToString("h.mm tt");
                            }

                            return "Invalid time format";
                        }
                    }
                </div>
            </div>
        </div>
    </div>





    @{
        int? numberOfElements = TempData["NumberOfElements"] as int?;
        Console.WriteLine("numberOfElements:  " + numberOfElements);
        var endpoint = "https://api-hulubeje.cnetcommerce.com/api/LineItemTaxCalculator/CalculateOtherFeesForCinema";
        var movieName = Model.MovieName;
        var price = Model.Price;
        var movieScheduleCode = Model.MovieScheduleCode;
        var companyTin = Model.CompanyTinNumber;
        var articleCode = Model.ArticleCode;
        var numberOfSeats = Model.NumberOfSeats;
        var payload = new
        {
            Consignee = "0912141914",
            OrgTin = companyTin,
            IndustryType = "LKUP000120765",
            Schedule = movieScheduleCode,
            LineItems = new object[]
        {

            new
                {
                    articleName = "SOFT DRINK",
                    articleCode = "1410-0001",
                    price = 50,
                    quantity = 1,
                    lineItemNote = "",
                    specialFlag = ""
                },

            new
                {
                    articleName = movieName,
                    articleCode = articleCode ,
                    price = price,
                    quantity = numberOfSeats,
                    lineItemNote = "",
                    specialFlag = "@CNET_MOVIE_PRODUCT"
                }
            }
        };
    }

    <script>
        var storedRemainingTime = sessionStorage.getItem('remainingTime');
        var countdownStarted = sessionStorage.getItem('countdownStarted') === 'true';
        var secondsAdded = sessionStorage.getItem('secondsAdded') === 'true';

        var updatedRemainingTime;

        if (countdownStarted && secondsAdded) {
            updatedRemainingTime = parseInt(storedRemainingTime);
        } else if (!countdownStarted && !secondsAdded) {
            updatedRemainingTime = parseInt(storedRemainingTime);
        } else {
            updatedRemainingTime = parseInt(storedRemainingTime) + 60;
        }


        var secondsAdded = sessionStorage.getItem('secondsAdded');

        console.log("at the start secondsAdded " + secondsAdded)
        var companyTin = "@Model.CompanyTinNumber";
        var movieScheduleCode = "@Model.MovieScheduleCode";

        var selectedSeats = JSON.parse(sessionStorage.getItem('selectedSeats')) || [];

        function extendCachedSeats() {
            if (!secondsAdded) {
                var endpoint = 'https://api-hulubeje.cnetcommerce.com/api/ManageSeatCache/ExtendCachedSeatsForSchedule';

                var payload = {
                    "schedule": movieScheduleCode,
                    "allSeats": selectedSeats,
                    "orgTin": companyTin,
                    "seconds": updatedRemainingTime
                };

                $.ajax({
                    url: endpoint,
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(payload),
                    success: function (response) {
                        console.log('Success:', response);
                    },
                    error: function (error) {
                        console.error('Error:', error);
                    }
                });
            }
            else {
                console.log("already extended cache time");
            }
        }

        function bill() {
            
            var movieName = "@Model.MovieName";
            var price = "@Model.Price";
            var movieScheduleCode = "@Model.MovieScheduleCode";
            var companyTin = "@Model.CompanyTinNumber";
            var articleCode = "@Model.ArticleCode";
            var numberOfSeats = "@Model.NumberOfSeats";
            $.ajax({
                url: '/FoodAndBeverage/CalculateBill',
                type: 'POST',
                data: {
                    movieName: movieName,
                    price: price,
                    movieScheduleCode: movieScheduleCode,
                    companyTin: companyTin,
                    articleCode: articleCode,
                    numberOfSeats: numberOfSeats,
                    selectedItems: JSON.stringify(selectedItems) // Convert the array to a JSON string
                },
                traditional: true, // Serialize the data in traditional style
                success: function (data) {
                    $("#Bill").html(data);
                },
                error: function (error) {
                    console.error('Error:', error);
                }
            });
            console.log(selectedItems);
        }

        function startCountdownTimer() {
            $('#UpdatedCountDownTimer').show();
            countdownInterval = setInterval(function () {
                $('#UpdatedCountDownTimer').text("Time remaining: " + formatTime(updatedRemainingTime));
                updatedRemainingTime--;

                if (updatedRemainingTime <= 0) {
                    clearInterval(countdownInterval);
                    alert("Booking time expired. Please restart the booking process.");
                    sessionStorage.clear();
                    window.location.href = '@Url.Action("Index","Home")';
                }
                sessionStorage.setItem("remainingTime", updatedRemainingTime);
            }, 1000);

            sessionStorage.setItem('secondsAdded', 'true');
        }

        $(document).ready(function () {
            if (updatedRemainingTime > 0) {
                startCountdownTimer(updatedRemainingTime);
            }
            extendCachedSeats();
            setTimeout(bill, 10000);
        });

        function formatTime(seconds) {
            var min = Math.floor(seconds / 60);
            var sec = seconds % 60;
            return min + ":" + (sec < 10 ? "0" : "") + sec;
        }

        console.log("Updated Remaining Time: " + updatedRemainingTime);

        document.addEventListener('DOMContentLoaded', function () {
            // Use event delegation to handle clicks on dynamically generated cards
            document.addEventListener('click', function (event) {
                if (event.target.matches('.btn-outline-danger')) {
                    decrementValue(event.target);
                } else if (event.target.matches('.btn-outline-primary')) {
                    incrementValue(event.target);
                }
            });
        });

        const selectedItemsContainer = document.getElementById('selected-items-container');
        const selectedItems = [];

        function showQuantityControl(button) {

            // Find the parent card element
            var cardBody = button.closest('.card-body');

            // Toggle visibility of quantity control and show button
            var quantityControl = cardBody.querySelector('.quantity-control');
            quantityControl.style.display = quantityControl.style.display === 'flex' ? 'none' : 'flex';

            button.style.display = quantityControl.style.display === 'none' ? 'inline-block' : 'none';
            console.log ("Add to cart")
        }

        function incrementValue(button) {
            // Find the associated quantity element
            var quantityElement = button.parentElement.querySelector('.quantity');
            let currentValue = parseInt(quantityElement.textContent, 10);
            quantityElement.textContent = currentValue + 1;
            updateCardDisplay(quantityElement);
        }

        function decrementValue(button) {
            // Find the associated quantity element
            var quantityElement = button.parentElement.querySelector('.quantity');
            let currentValue = parseInt(quantityElement.textContent, 10) || 0;
            if (currentValue > 0) {
                quantityElement.textContent = currentValue - 1;
                updateCardDisplay(quantityElement);
            }
        }

        function updateCardDisplay(quantityElement) {
            var cardContainer = quantityElement.closest('.card-body');
            var cardTitle = cardContainer.querySelector('.card-title');
            var cardText = cardContainer.querySelector('.card-text');
            var article = cardContainer.querySelector('.article');

            var itemName = cardTitle.textContent;
            var itemPrice = parseFloat(cardText.textContent);
            var itemArticleCode = article.textContent;

            var quantity = parseInt(quantityElement.textContent, 10);

            if (quantity > 0) {
                itemPrice *= quantity;

                var existingItem = selectedItems.find(item => item.name === itemName);

                if (!existingItem) {
                    selectedItems.push({ name: itemName, quantity: quantity, price: itemPrice, articleCode: itemArticleCode });
                } else {
                    existingItem.quantity = quantity;
                    existingItem.price = itemPrice;
                }
            } else {
                selectedItems.splice(selectedItems.findIndex(item => item.name === itemName), 1);
            }
            renderSelectedItems();
            console.log(selectedItems);
        }

        function renderSelectedItems() {
            var selectedSeatNamesJson = sessionStorage.getItem('selectedSeatNames');
            var selectedSeatNamesArray = selectedSeatNamesJson ? JSON.parse(selectedSeatNamesJson) : [];
            var numberOfElements = selectedSeatNamesArray.length;
            var movieName = '@Model.MovieName';
            var moviePrice = '@Model.Price';
            var totalAmount = moviePrice * numberOfElements;

            var newContent = `
                    <div class="header mb-3" style="display: flex; justify-content: space-between; padding: 5px; background-color: black; color: white;">
                                    <span style="flex: 2 1 0%;">Description</span>
                                    <span style="flex: 1 1 0%;">Qty</span>
                                    <span style="flex: 1 1 0%;">Price</span>
                                    <span style="flex: 1 1 0%;text-align: right;">Amount</span>
                                </div>
            <div class="Movie" style="display: flex; justify-content: space-between; padding: 5px">
                <span style="flex: 2 1 0%;">${movieName} [Movie]</span>
                <span style="flex: 1 1 0%">${numberOfElements}</span>
                <span style="flex: 1 1 0%">${moviePrice} $</span>
                <span style="flex: 1 1 0%; text-align: right;">${totalAmount.toFixed(1)} $</span>
            </div>
        `;
            selectedItemsContainer.innerHTML = newContent;

            let totalPrice = 0;
            let totalCount = 0;

            selectedItems.forEach(item => {
                item.unitPrice = item.quantity > 0 ? item.price / item.quantity : 0;
                var itemDiv = document.createElement('div');
                itemDiv.className = 'selected-item';

                itemDiv.style.display = 'flex';
                itemDiv.style.justifyContent = 'space-between';
                itemDiv.style.padding = '5px';

                var nameSpan = document.createElement('span');
                var quantitySpan = document.createElement('span');
                var unitPriceSpan = document.createElement('span'); // New span for unit price
                var priceSpan = document.createElement('span');

                nameSpan.textContent = item.name;
                nameSpan.style.flex = '2';

                quantitySpan.textContent = item.quantity;
                quantitySpan.style.flex = '1';

                unitPriceSpan.textContent = `${item.unitPrice.toFixed(2)} $`; // Display unit price
                unitPriceSpan.style.flex = '1';

                priceSpan.textContent = `${item.price.toFixed(2)} $`;
                priceSpan.style.flex = '1';
                priceSpan.style.textAlign = 'right';

                itemDiv.appendChild(nameSpan);
                itemDiv.appendChild(quantitySpan);
                itemDiv.appendChild(unitPriceSpan); // Append the unit price span
                itemDiv.appendChild(priceSpan);

                selectedItemsContainer.appendChild(itemDiv);

                totalPrice += item.price;
                totalCount += item.quantity;
            });
        }
    </script>
</body>
</html>