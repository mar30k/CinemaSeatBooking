@model CinemaSeatBooking.Models.SeatLayout
<style>
    .container-xl {
        max-width: 100%;
        overflow-x: auto;
    }

    .buttons:hover {
        background-color: green;
        color: white;
        cursor: pointer;
    }

    .buttons {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0;
        font-size: 10px;
        font-weight: 400;
        background: #fff;
        border: 1px solid #1ea83c;
        border-radius: 2px;
        color: #1ea83c;
        width: 100%;
        height: 100%;
    }

    .hall {
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

        .hall .p {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            background: #fff;
            width: 100%;
            height: 100%;
        }

    .booked-seat {
        background-color: blue;
        color: white;
    }

</style>
@* <div style="margin-top: 20px; color: white; font-size: 14px; display: grid; grid-template-columns: repeat(4, auto); gap: 10px;">
    <div>
        <p style="background-color: blue; padding: 4px 8px; border-radius: 5px; border: 1px solid green; margin: 0; width:30px;">@(Model.BookedSeats?.Count ?? 0)</p>
        <p style="margin: 0; color: black">Booked </p>
    </div>

    <div>
        <p style="background-color: red; padding: 4px 8px; border-radius: 5px; border: 1px solid green; margin: 0; width:30px;">@(Model.SoldSeats?.Count ?? 0)</p>
        <p style="margin: 0; color: black">Sold </p>
    </div>

    <div>
        <p style="background-color: darkorange; padding: 4px 8px; border-radius: 5px; border: 1px solid green; margin: 0; width:30px;">@(Model.TakenSeats?.Count ?? 0)</p>
        <p style="margin: 0; color: black">Taken </p>
    </div>

    <div>
        <p style="background-color: white; color: black; padding: 4px 8px; border-radius: 5px; border: 1px solid green; margin: 0; width:40px;">@(Model.AvailableSeats?.Count(seatCode => Model.Seats.Any(seat => seat.Code == seatCode && !string.IsNullOrWhiteSpace(seat.Name))) - Model.TakenSeats?.Count ?? 0)</p>
        <p style="margin: 0; color: black">Available </p>
    </div>
</div>
 *@
<div style="margin-top: 20px; color: white; font-size: 14px;">
    <p style="background-color: blue; display: inline-block; padding: 4px 8px; border-radius: 5px; border: 1px solid green; margin-right: 5px;">Booked: @(Model.BookedSeats?.Count ?? 0)</p>
    <p style="background-color: red; display: inline-block; padding: 4px 8px; border-radius: 5px; border: 1px solid green; margin-right: 5px;">Sold: @(Model.SoldSeats?.Count ?? 0)</p>
    <p style="background-color: darkorange; display: inline-block; padding: 4px 8px; border-radius: 5px; border: 1px solid green; margin-right: 5px;">Taken: @(Model.TakenSeats?.Count ?? 0)</p>
    <p style="background-color: white; color: black; display: inline-block; padding: 4px 8px; border-radius: 5px; border: 1px solid green;">Available: @(Model.AvailableSeats?.Count(seatCode => Model.Seats.Any(seat => seat.Code == seatCode && !string.IsNullOrWhiteSpace(seat.Name))) - Model.TakenSeats?.Count ?? 0)</p>
</div>
<div style="background: lightgrey; padding: 20px;">
    @if (Model != null)
    {
        <div class="container">
        </div>
        @if (Model.Seats != null && Model.Seats.Any())
        {
            <div style="display: flex;justify-content:safe center; align-items: center; overflow-x: auto; margin-top: 30px;">
                <table>
                    @for (int y = Model.MaxY; y >= 1; y--)
                    {
                        <tr>
                            @for (int x = 1; x <= Model.MaxX; x++)
                            {
                                <td style="height: 30px !important; width: 30px !important">
                                    @if (Model.Seats.Any(seat => seat.X == x && seat.Y == y && !string.IsNullOrWhiteSpace(seat.Name)))
                                    {
                                        var seat = Model.Seats.First(seat => seat.X == x && seat.Y == y);

                                        // Check if the seat is booked, sold, or taken
                                        var isBooked = Model.BookedSeats?.Contains(seat.Code) ?? false;
                                        var isSold = Model.SoldSeats?.Contains(seat.Code) ?? false;
                                        var isTaken = Model.TakenSeats?.Contains(seat.Code) ?? false;

                                        var backgroundColor = isBooked ? (isSold ? "red" : "blue") : (isTaken ? "orange" : "");
                                        var textColor = isTaken || isBooked || (isBooked && isSold) ? "white" : "";

                                        <button id="@seat.Code" class="buttons" onclick="return false" @(isBooked || isSold || isTaken ? "disabled" : "") style="background-color: @(backgroundColor); color: @(textColor)">
                                            @seat.Name
                                        </button>
                                    }
                                    else
                                    {
                                        <div class="hall">
                                            <p></p>
                                        </div>
                                    }
                                </td>

                            }
                        </tr>

                    }
                </table>
            </div>
        }
        else
        {
            <p>No seats available.</p>
        }
    }
    else
    {
        <p>No seat arrangement data available.</p>
    }
</div>